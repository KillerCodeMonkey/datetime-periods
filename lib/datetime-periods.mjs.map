{"version":3,"file":"datetime-periods.mjs","sources":["../src/index.ts"],"sourcesContent":["/**\n   * Returns the days count in a month.\n   *\n   * @param month - The month number (1-12)\n   * @param year - The full year number\n   * @returns The days in a month as number\n   */\nexport const getDaysInMonth = (month: number, year: number): number => {\n  return new Date(new Date(`${month < 12 ? year : year + 1}-${month < 12 ? month + 1 : 1}-1`).setDate(0)).getDate()\n}\n\nexport interface DateTimeObject {\n  year: number\n  month: number\n  day: number\n  hour: number\n  minute: number\n  second: number\n  tzOffset: number\n}\n\nexport interface GetDateTimePeriods {\n  value: DateTimeObject\n  originalValue: DateTimeObject\n  originalValueChanged: boolean\n  max: DateTimeObject\n  min: DateTimeObject\n  periods: {\n    days: number[]\n    hours: number[]\n    minutes: number[]\n    months: number[]\n    seconds: number[]\n    years: number[]\n  }\n}\n\nexport interface NeededPeriods {\n  days?: boolean\n  hours?: boolean\n  minutes?: boolean\n  months?: boolean\n  seconds?: boolean\n  years?: boolean\n}\n\nexport const defaultNeededPeriods = {\n  days: true,\n  hours: true,\n  minutes: true,\n  months: true,\n  seconds: true,\n  years: true\n}\n\n/**\n   * Returns a date object based on a JS date.\n   *\n   * @param date - A javascript date\n   * @returns The date as a plain old javascript object representation\n   */\nexport const getDateTimeObject = (date: Date): DateTimeObject => {\n  return {\n    day: date.getDate(),\n    hour: date.getHours(),\n    minute: date.getMinutes(),\n    month: date.getMonth() + 1,\n    second: date.getSeconds(),\n    tzOffset: date.getTimezoneOffset(),\n    year: date.getFullYear()\n  }\n}\n\n/**\n   * Returns a valid list of years down to seconds for a date and min and max date.\n   *\n   * @param value - A javascript date\n   * @param min - The optional min date\n   * @param max - The optional max date\n   * @param needed - The optional needed object where it is possible to define the needed periods\n   * @returns The date params as object representation and the valid periods\n   */\nexport const getDateTimePeriods = (value: Date = new Date(), min?: Date, max?: Date, needed: NeededPeriods = defaultNeededPeriods): GetDateTimePeriods => {\n  needed = Object.assign({}, defaultNeededPeriods, needed)\n  value = new Date(value.setMilliseconds(0))\n  const valueOriginal = new Date(value)\n  let valueChanged = false\n  const defaultMin = new Date(new Date(value).setFullYear(value.getFullYear() - 100))\n  const defaultMax = new Date(new Date(value).setFullYear(value.getFullYear() + 100))\n\n  min = min ? new Date(min.setMilliseconds(0)) : defaultMin\n  max = max ? new Date(max.setMilliseconds(0)) : defaultMax\n\n  let minInMs = min.getTime()\n  let maxInMs = max.getTime()\n  let valueInMs = value.getTime()\n\n  if (minInMs > maxInMs) {\n    console.warn('min > max, setting min and max to defaults')\n    min = defaultMin\n    minInMs = defaultMin.getTime()\n    max = defaultMax\n    maxInMs = defaultMax.getTime()\n  }\n\n  if (minInMs > valueInMs) {\n    console.warn('min > value, setting value to min')\n    value = new Date(min)\n    valueInMs = minInMs\n    valueChanged = true\n  }\n\n  if (maxInMs < valueInMs) {\n    console.warn('max < value, setting value to max')\n    value = new Date(max)\n    valueInMs = maxInMs\n    valueChanged = true\n  }\n\n  const minDateObject = getDateTimeObject(min)\n  const maxDateObject = getDateTimeObject(max)\n  const currentDateObject = getDateTimeObject(value)\n\n  let days = needed.days ? Array.from({ length: getDaysInMonth(currentDateObject.month, currentDateObject.year) }, (_v, i: number): number => i + 1) : []\n  let months = needed.months ? Array.from({ length: 12 }, ( _v, i: number): number => i + 1) : []\n  let hours = needed.hours ? Array.from({ length: 24 }, ( _v, i: number): number => i) : []\n  let minutes = needed.minutes ? Array.from({ length: 60 }, ( _v, i: number): number => i) : []\n  let seconds = needed.seconds ? Array.from({ length: 60 }, ( _v, i: number): number => i) : []\n\n  // filter months and days and minutes and seconds\n  if (currentDateObject.year === minDateObject.year) {\n    months = months.filter((month: number): boolean => month >= minDateObject.month)\n\n    if (currentDateObject.month === minDateObject.month) {\n      days = days.filter((day: number): boolean => day >= minDateObject.day)\n\n      if (currentDateObject.day === minDateObject.day) {\n        hours = hours.filter((hour: number): boolean => hour >= minDateObject.hour)\n\n        if (currentDateObject.hour === minDateObject.hour) {\n          minutes = minutes.filter((minute: number): boolean => minute >= minDateObject.minute)\n\n          if (currentDateObject.minute === minDateObject.minute) {\n            seconds = seconds.filter((second: number): boolean => second >= minDateObject.second)\n          }\n        }\n      }\n    }\n  }\n  if (currentDateObject.year === maxDateObject.year) {\n    months = months.filter((month: number): boolean => month <= maxDateObject.month)\n\n    if (currentDateObject.month === maxDateObject.month) {\n      days = days.filter((day: number): boolean => day <= maxDateObject.day)\n\n      if (currentDateObject.day === maxDateObject.day) {\n        hours = hours.filter((hour: number): boolean => hour <= maxDateObject.hour)\n\n        if (currentDateObject.hour === maxDateObject.hour) {\n          minutes = minutes.filter((minute: number): boolean => minute <= maxDateObject.minute)\n\n          if (currentDateObject.minute === maxDateObject.minute) {\n            seconds = seconds.filter((second: number): boolean => second <= maxDateObject.second)\n          }\n        }\n      }\n    }\n  }\n\n  // filter years\n  const years = needed.years ? Array.from({ length: maxDateObject.year - minDateObject.year + 1 }, (_v, i: number): number => minDateObject.year + i) : []\n\n  return {\n    max: maxDateObject,\n    min: minDateObject,\n    originalValue: getDateTimeObject(valueOriginal),\n    originalValueChanged: valueChanged,\n    periods: {\n      days,\n      hours,\n      minutes,\n      months,\n      seconds,\n      years\n    },\n    value: currentDateObject,\n  }\n}\n"],"names":["getDaysInMonth","month","year","Date","setDate","getDate","defaultNeededPeriods","days","hours","minutes","months","seconds","years","getDateTimeObject","date","day","hour","getHours","minute","getMinutes","getMonth","second","getSeconds","tzOffset","getTimezoneOffset","getFullYear","getDateTimePeriods","value","min","max","needed","Object","assign","setMilliseconds","valueOriginal","valueChanged","defaultMin","setFullYear","defaultMax","minInMs","getTime","maxInMs","valueInMs","console","warn","minDateObject","maxDateObject","currentDateObject","Array","from","length","_v","i","filter","originalValue","originalValueChanged","periods"],"mappings":"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"}