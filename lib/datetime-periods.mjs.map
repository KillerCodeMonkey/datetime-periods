{"version":3,"file":"datetime-periods.mjs","sources":["../src/index.ts"],"sourcesContent":["/**\n   * Returns the days count in a month.\n   *\n   * @param month - The month number (1-12)\n   * @param year - The full year number\n   * @returns The days in a month as number\n   */\nexport function getDaysInMonth(month: number, year: number): number {\n  return new Date(new Date(`${month < 12 ? year : year + 1}-${month < 12 ? month + 1 : 1}-1`).setDate(0)).getDate()\n}\n\nexport interface DateTimeObject {\n  year: number\n  month: number\n  day: number\n  hour: number\n  minute: number\n  second: number\n  tzOffset: number\n}\n\nexport interface GetValidDatesResult {\n  value: DateTimeObject\n  originalValue: DateTimeObject\n  originalValueChanged: boolean\n  max: DateTimeObject\n  min: DateTimeObject\n  periods: {\n    days: number[]\n    hours: number[]\n    minutes: number[]\n    months: number[]\n    seconds: number[]\n    years: number[]\n  }\n}\n\n/**\n   * Returns a date object based on a JS date.\n   *\n   * @param date - A javascript date\n   * @returns The date as a plain old javascript object representation\n   */\nexport function getDateTimeObject(date: Date): DateTimeObject {\n  return {\n    year: date.getFullYear(),\n    month: date.getMonth() + 1,\n    day: date.getDate(),\n    hour: date.getHours(),\n    minute: date.getMinutes(),\n    second: date.getSeconds(),\n    tzOffset: date.getTimezoneOffset()\n  }\n}\n\n/**\n   * Returns a valid list of years down to seconds for a date and min and max date.\n   *\n   * @param value - A javascript date\n   * @param min - The optional min date\n   * @param max - The optional max date\n   * @returns The date params as object representation and the valid periods\n   */\nexport function getDateTimePeriods(value: Date = new Date(), min?: Date, max?: Date): GetValidDatesResult {\n  value = new Date(value.setMilliseconds(0))\n  const valueOriginal = new Date(value)\n  let valueChanged = false\n  const defaultMin = new Date(new Date(value).setFullYear(value.getFullYear() - 100))\n  const defaultMax = new Date(new Date(value).setFullYear(value.getFullYear() + 100))\n\n  min = min ? new Date(min.setMilliseconds(0)) : defaultMin\n  max = max ? new Date(max.setMilliseconds(0)) : defaultMax\n\n  let minInMs = min.getTime()\n  let maxInMs = max.getTime()\n  let valueInMs = value.getTime()\n\n  if (minInMs > maxInMs) {\n    console.warn('min > max, setting min and max to defaults')\n    min = defaultMin\n    minInMs = defaultMin.getTime()\n    max = defaultMax\n    maxInMs = defaultMax.getTime()\n  }\n\n  if (minInMs > valueInMs) {\n    console.warn('min > value, setting value to min')\n    value = new Date(min)\n    valueInMs = minInMs\n    valueChanged = true\n  }\n\n  if (maxInMs < valueInMs) {\n    console.warn('max < value, setting value to max')\n    value = new Date(max)\n    valueInMs = maxInMs\n    valueChanged = true\n  }\n\n  const minDateObject = getDateTimeObject(min)\n  const maxDateObject = getDateTimeObject(max)\n  const currentDateObject = getDateTimeObject(value)\n\n  let days = Array.from({ length: getDaysInMonth(currentDateObject.month, currentDateObject.year) }, (_v, i: number) => i + 1)\n  let months = Array.from({ length: 12 }, ( _v, i: number) => i + 1)\n  let hours = Array.from({ length: 24 }, ( _v, i: number) => i)\n  let minutes = Array.from({ length: 60 }, ( _v, i: number) => i)\n  let seconds = Array.from({ length: 60 }, ( _v, i: number) => i)\n\n  // filter months and days and minutes and seconds\n  if (currentDateObject.year === minDateObject.year) {\n    months = months.filter((month: number) => month >= minDateObject.month)\n\n    if (currentDateObject.month === minDateObject.month) {\n      days = days.filter((day: number) => day >= minDateObject.day)\n\n      if (currentDateObject.day === minDateObject.day) {\n        hours = hours.filter((hour: number) => hour >= minDateObject.hour)\n\n        if (currentDateObject.hour === minDateObject.hour) {\n          minutes = minutes.filter((minute: number) => minute >= minDateObject.minute)\n\n          if (currentDateObject.minute === minDateObject.minute) {\n            seconds = seconds.filter((second: number) => second >= minDateObject.second)\n          }\n        }\n      }\n    }\n  }\n  if (currentDateObject.year === maxDateObject.year) {\n    months = months.filter((month: number) => month <= maxDateObject.month)\n\n    if (currentDateObject.month === maxDateObject.month) {\n      days = days.filter((day: number) => day <= maxDateObject.day)\n\n      if (currentDateObject.day === maxDateObject.day) {\n        hours = hours.filter((hour: number) => hour <= maxDateObject.hour)\n\n        if (currentDateObject.hour === maxDateObject.hour) {\n          minutes = minutes.filter((minute: number) => minute <= maxDateObject.minute)\n\n          if (currentDateObject.minute === maxDateObject.minute) {\n            seconds = seconds.filter((second: number) => second <= maxDateObject.second)\n          }\n        }\n      }\n    }\n  }\n\n  // filter years\n  const years = Array.from({ length: maxDateObject.year - minDateObject.year + 1 }, (_v, i: number) => minDateObject.year + i)\n\n  return {\n    value: currentDateObject,\n    originalValue: getDateTimeObject(valueOriginal),\n    originalValueChanged: valueChanged,\n    max: maxDateObject,\n    min: minDateObject,\n    periods: {\n      days,\n      hours,\n      minutes,\n      months,\n      seconds,\n      years\n    }\n  }\n}\n"],"names":["getDaysInMonth","month","year","Date","setDate","getDate","getDateTimeObject","date","getFullYear","getMonth","day","hour","getHours","minute","getMinutes","second","getSeconds","tzOffset","getTimezoneOffset","getDateTimePeriods","value","min","max","setMilliseconds","valueOriginal","valueChanged","defaultMin","setFullYear","defaultMax","minInMs","getTime","maxInMs","valueInMs","console","warn","minDateObject","maxDateObject","currentDateObject","days","Array","from","length","_v","i","months","hours","minutes","seconds","filter","years","originalValue","originalValueChanged","periods"],"mappings":"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"}